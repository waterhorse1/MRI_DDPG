import numpy as np
import sys
import cv2
import torch

class Env():
    def __init__(self, move_range=3):
        self.move_range = move_range
        self.batch_size = None
        self.ori_image = None
        self.image = None
        self.previous_image = None
    
    def reset(self, ori_image, image):
        self.batch_size = ori_image.shape[0]
        self.ori_image = ori_image
        self.image = image
        self.previous_image = None

    def step(self, act):
        self.previous_image = self.image.copy()

        neutral = (self.move_range - 1)/2
        move = act.astype(np.float32)
        move = (move - neutral) / 255
        moved_image = self.image + move[:,np.newaxis,:,:]
        gaussian = np.zeros(self.image.shape, self.image.dtype)
        gaussian2 = np.zeros(self.image.shape, self.image.dtype)
        bilateral = np.zeros(self.image.shape, self.image.dtype)
        bilateral2 = np.zeros(self.image.shape, self.image.dtype)
        median = np.zeros(self.image.shape, self.image.dtype)
        box = np.zeros(self.image.shape, self.image.dtype)
        b, c, h, w = self.image.shape
        for i in range(self.batch_size):
            if np.sum(act[i]==self.move_range) > 0:
                gaussian[i, 0] = cv2.GaussianBlur(self.image[i,0], ksize=(5,5), sigmaX=0.5)
            if np.sum(act[i]==self.move_range+1) > 0:
                bilateral[i, 0] = cv2.bilateralFilter(self.image[i,0], d=5, sigmaColor=0.1, sigmaSpace=5)
            if np.sum(act[i]==self.move_range+2) > 0:
                median[i, 0] = cv2.medianBlur(self.image[i,0], ksize=5)
            if np.sum(act[i]==self.move_range+3) > 0:
                gaussian2[i, 0] = cv2.GaussianBlur(self.image[i,0], ksize=(5,5), sigmaX=1.5)
            if np.sum(act[i]==self.move_range+4) > 0:
                bilateral2[i, 0] = cv2.bilateralFilter(self.image[i,0], d=5, sigmaColor=1.0, sigmaSpace=5)
            if np.sum(act[i]==self.move_range+5) > 0:
                box[i, 0] = cv2.boxFilter(self.image[i,0], ddepth=-1, ksize=(5,5))
        
        self.image = moved_image
        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range, gaussian, self.image)
        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+1, bilateral, self.image)
        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+2, median, self.image)
        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+3, gaussian2, self.image)
        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+4, bilateral2, self.image)
        self.image = np.where(act[:,np.newaxis,:,:]==self.move_range+5, box, self.image)

        reward = np.square(self.ori_image - self.previous_image) * 255 - np.square(self.ori_image - self.image) * 255
        return self.image, reward 
